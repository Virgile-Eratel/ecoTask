# GitLab CI/CD Configuration pour EcoTaskv2
# Application de gestion de tâches avec suivi d'impact environnemental

# Image de base Node.js
image: node:18-alpine

# Variables globales
variables:
  NODE_ENV: "test"
  DATABASE_URL: "file:./test.db"
  JWT_SECRET: "test-jwt-secret-key"

# Cache pour optimiser les builds
cache:
  key: 
    files:
      - package-lock.json
      - backend/package-lock.json
  paths:
    - node_modules/
    - backend/node_modules/
    - .yarn/cache/

# Stages de la pipeline
stages:
  - install
  - lint
  - test
  - build
  - deploy

# Installation des dépendances
install_dependencies:
  stage: install
  script:
    - echo "Installation des dépendances frontend..."
    - yarn install --frozen-lockfile
    - echo "Installation des dépendances backend..."
    - cd backend && yarn install --frozen-lockfile
  artifacts:
    paths:
      - node_modules/
      - backend/node_modules/
    expire_in: 1 hour
  only:
    - merge_requests
    - main
    - develop

# Linting Frontend
lint_frontend:
  stage: lint
  dependencies:
    - install_dependencies
  script:
    - echo "Linting du code frontend..."
    - yarn lint || echo "Linting frontend terminé avec des avertissements"
  allow_failure: true
  when: manual
  only:
    - merge_requests
    - main
    - develop

# Linting Backend
lint_backend:
  stage: lint
  dependencies:
    - install_dependencies
  script:
    - echo "Linting du code backend..."
    - cd backend && yarn lint || echo "Linting backend terminé avec des avertissements"
  allow_failure: true
  when: manual
  only:
    - merge_requests
    - main
    - develop

# Tests Frontend
test_frontend:
  stage: test
  dependencies:
    - install_dependencies
  script:
    - echo "Exécution des tests frontend..."
    - yarn test --run
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 1 week
  when: manual
  only:
    - merge_requests
    - main
    - develop

# Tests Backend
test_backend:
  stage: test
  dependencies:
    - install_dependencies
  before_script:
    - echo "Installation d'OpenSSL..."
    - apk add --no-cache openssl
    - echo "Préparation de la base de données SQLite pour les tests..."
    - cd backend
    - npx prisma generate
    - npx prisma db push --force-reset
  script:
    - echo "Exécution des tests backend..."
    - yarn test:ci
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage/cobertura-coverage.xml
      junit: backend/coverage/junit.xml
    paths:
      - backend/coverage/
    expire_in: 1 week
  when: manual
  only:
    - merge_requests
    - main
    - develop

# Build Frontend
build_frontend:
  stage: build
  dependencies:
    - install_dependencies
  script:
    - echo "Build de l'application frontend..."
    - yarn build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  when: manual
  only:
    - merge_requests
    - main
    - develop

# Build Backend
build_backend:
  stage: build
  dependencies:
    - install_dependencies
  script:
    - echo "Build de l'application backend..."
    - cd backend
    - npx prisma generate
    - yarn build
  artifacts:
    paths:
      - backend/dist/
    expire_in: 1 week
  when: manual
  only:
    - merge_requests
    - main
    - develop

deploy_dev:
  stage: deploy
  image: alpine:latest
  only:
    - main        # ne déployez que depuis la branche main
  before_script:
    # installer ssh & rsync
    - apk add --no-cache openssh-client rsync
    # démarrer l'agent SSH, ajouter la clé privée
    - eval "$(ssh-agent -s)"
    - echo "$SSH_KEY" | tr -d '\r' | ssh-add -
    # config SSH
    - mkdir -p ~/.ssh
    - printf "%s\n" "$SSH_PUB" > ~/.ssh/id_rsa.pub
    - chmod 600 ~/.ssh/id_rsa*
    # éviter les prompts host key verification
    - ssh-keyscan -H 51.68.233.128 >> ~/.ssh/known_hosts
  script:
    # 1) copier le frontend
    - rsync -az --delete dist/ dev5@51.68.233.128:/var/www/ecotask/frontend/
    # 2) copier le backend
    - rsync -az --delete backend/dist/ dev5@51.68.233.128:/var/www/ecotask/backend/
    # 3) relancer le serveur (ici PM2, adaptez si besoin)
    - ssh dev5@51.68.233.128 "cd /var/www/ecotask/backend && pm2 restart all"
  environment:
    name: dev
    url: http://51.68.233.128